#!/usr/bin/env python
from __future__ import print_function
import sys
import os
import numpy
from numpy import sqrt, array, diag, ones, zeros, where, newaxis

import fitsio

import ngmix
import nsim

import argparse



parser=argparse.ArgumentParser(formatter_class=argparse.ArgumentDefaultsHelpFormatter)

parser.add_argument('run',help='run to average')

parser.add_argument('--refrun',
                    help=('use this run for corrections rather '
                          'than that listed in the config file') )

parser.add_argument('--nboot',type=int,default=100,
                  help="number of bootstraps")

parser.add_argument('--g-field',default='mcal_g',
                  help="the field to use for g")
parser.add_argument('--gpsf-field',default='mcal_gpsf',
                  help="the field to use for gpsf")

parser.add_argument('--R-field',default='mcal_R',
                  help="the field to use for response")

parser.add_argument('--Rpsf-field', default='mcal_Rpsf',
                    help="using the indicated field for psf response")

def get_dtype():

    dt = [
        ('shear_true','f8',2),
        ('shear','f8',2),
        ('shear_err','f8',2),
        ('shear_cov','f8',(2,2)),
        ('R','f8',(2,2)),
        ('Rpsf','f8',2),
        ('psf_corr','f8',2)
    ]

    return dt

def get_shear_stats(conf, data, deep_data, args):

    g    = data[args.g_field]
    gpsf = data[args.gpsf_field]
    R    = deep_data[args.R_field]
    Rpsf = deep_data[args.Rpsf_field]

    res=ngmix.metacal.bootstrap_shear(g,
                                      gpsf,
                                      R,
                                      Rpsf,
                                      args.nboot,
                                      verbose=True)
    return res

def get_averaged(conf, deep_data, args):

    model=conf['fit_model']

    print(conf['fname'])
    columns=[args.g_field, args.gpsf_field]

    data = fitsio.read(conf['fname'], columns=columns)

    dt= get_dtype()
    d=zeros(1, dtype=dt)

    res = get_shear_stats(conf, data, deep_data, args)

    shtrue=array(nsim.util.get_true_shear(conf['simc']))


    d['shear_true'][0] = shtrue
    d['shear'][0] = res['shear']
    d['shear_err'][0] = res['shear_err']
    d['shear_cov'][0] = res['shear_cov']

    d['R'][0] = res['R']
    d['Rpsf'][0] = res['Rpsf']
    d['psf_corr'][0] = res['psf_corr']

    sh=res['shear']
    sherr=res['shear_err']
    print("meas: %g +/- %g, %g +/- %g" % (sh[0],sherr[0],sh[1],sherr[1]))
    for i in (0,1):
        if shtrue[i] != 0.0:
            

            fracdiff=sh[i]/shtrue[i]-1.0
            fracdiff_err=sherr[i]/shtrue[i]

            mess='s%d fracdiff: %.2e +/- %.2e'
            print(mess % (i+1,fracdiff, fracdiff_err))

    return d


def read_deep_data(conf, args):
    import esutil as eu

    if args.refrun is not None:
        run=args.refrun
    else:
        run = conf['deep_data']['run']


    t1=nsim.files.read_output(run, 0, rows=[0])

    if 'mcal_R' in t1.dtype.names:
        old_style=False
        columns=['mcal_R', 'mcal_Rpsf']
    else:
        old_style=True
        columns=['mcal_g_sens', 'mcal_psf_sens']

    deep_data=nsim.files.read_output(run,
                                     0,
                                     columns=columns)


    if old_style:

        dt=deep_data.dtype.descr
        new_dt=[]

        for d in dt:
            if d[0] == 'mcal_g_sens':
                nd = list(d)
                nd[0] = 'mcal_R'

            elif d[0] == 'mcal_psf_sens':
                nd = list(d)
                nd[0] = 'mcal_Rpsf'

            else:
                nd=d

            new_dt.append( tuple(nd) )

        deep_data = deep_data.view(new_dt)

    return deep_data

def main():
    args = parser.parse_args()

    is2n=0
    conf = nsim.files.read_config(args.run)
    conf['simc'] = nsim.files.read_config(conf['sim'])


    conf['fname']=nsim.files.get_output_url(args.run, 0, is2n)

    deep_data = read_deep_data(conf, args)

    output = get_averaged(conf, deep_data, args)

    out_fname=nsim.files.get_averaged_url(args.run, is2n=is2n)

    print('writing:',out_fname)
    fitsio.write(out_fname, output, clobber=True)

main()
