#!/usr/bin/env python
"""
    %prog run
"""

import sys
from sys import stderr
import os
import numpy
from numpy import sqrt

import esutil as eu
import fitsio
import lensing
import nsim

import time

from optparse import OptionParser
parser=OptionParser(__doc__)

parser.add_option('--skip',default=None,
                  help="is2n elements to skip")
parser.add_option('--show',action='store_true',
                  help="plot histogram of jackknife shears")


COV_SOFTEN=1.0e-6
ERR_SOFTEN=1.0e-6

CHUNKSIZE=1000000
def get_dtype(fobj):

    data = fobj[1][0:10]

    names=data.dtype.names

    dt =data.dtype.descr
    dt += [('s2n_matched','f8'),
           ('nsum','i8'),
           ('g_sum','f8',2),
           ('shear_cov','f8',(2,2)),
           ('shear_cov_inv_sum','f8',(2,2))]

    if 'P' in names:
        do_pqr=True
        dt += [('Q_sum','f8',2),
               ('Cinv_sum','f8',(2,2)),
               ('shear','f8',2)]
    else:
        do_pqr=False


    if 'gsens' in data.dtype.names:
        do_lensfit=True
        dt += [('gsens_sum','f8',2),
               ('shear_lensfit','f8',2),
               ('shear_lensfit_cov','f8',(2,2)),
               ('shear_lensfit_cov_inv_sum','f8',(2,2)),
              ]

    else:
        do_lensfit=False

    do_simple=False
    if data['pars'].shape[1] == 6:
        do_simple=True
        dt += [('flux_sum','f8'),
               ('flux_err2invsum','f8'),
               ('flux_s2n_sum','f8'),
               ('flux','f8'),
               ('flux_err','f8'),
               ('flux_s2n','f8'),

               ('T_sum','f8'),
               ('T_err2invsum','f8'),
               ('T_s2n_sum','f8'),
               ('T','f8'),
               ('T_err','f8'),
               ('T_s2n','f8')]

    return dt, do_pqr, do_lensfit, do_simple

def get_chunk_info(nrows):
    nchunks=nrows//CHUNKSIZE

    remain = nrows % CHUNKSIZE
    if remain > 0:
        nchunks += 1

    return nchunks

def do_sums(data, d, do_pqr=False, do_lensfit=False, do_simple=False):
    names=data.dtype.names

    if 'g_cov' in names:
        cov = data['g_cov']
    else:
        #print >>stderr,'ASSUMING g_cov in slot 2,3'
        cov = data['pcov'][:,2:2+2, 2:2+2]

    cov += COV_SOFTEN

    cov_inv = cov.copy()

    det = cov[:,0,0]*cov[:,1,1] - cov[:,0,1]*cov[:,1,0]
    cov_inv[:,0,0] = cov[:,1,1]
    cov_inv[:,1,1] = cov[:,0,0]
    cov_inv[:,0,1] = - cov[:,0,1]
    cov_inv[:,1,0] = - cov[:,1,0]

    w,=numpy.where( det > 0 )
    idet = numpy.zeros(det.size)
    idet[w] = 1.0/det[w]
    cov_inv[:,0,0] *= idet
    cov_inv[:,0,1] *= idet
    cov_inv[:,1,0] *= idet
    cov_inv[:,1,1] *= idet

    shear_cov_inv = cov_inv.sum(axis=0)

    d['shear_cov_inv_sum'][0,:,:] += shear_cov_inv

    d['nsum'][0] += data.size
    if 'g' in names:
        d['g_sum'][0] += data['g'].sum(axis=0)
    else:
        #print >>stderr,'ASSUMING g in slot 2,3'
        d['g_sum'][0] += data['pars'][:,2:2+2].sum(axis=0)

    if do_pqr:
        Q_sum, Cinv_sum = lensing.pqr.get_shear_pqr_sums(data['P'],
                                                         data['Q'],
                                                         data['R'])
        d['Q_sum'][0] += Q_sum
        d['Cinv_sum'][0] += Cinv_sum

    if do_lensfit:
        d['gsens_sum'] = data['gsens'].sum(axis=0)

    if do_simple:
        flux     = data['pars'][:,5]
        flux_var = data['pcov'][:,5,5]
        flux_var += COV_SOFTEN

        flux_err = sqrt(flux_var)

        d['flux_sum'][0]        += flux.sum()
        d['flux_err2invsum'][0] += (1.0/flux_var[w]).sum()

        flux_s2n_vals = flux/flux_err
        d['flux_s2n_sum'][0] += flux_s2n_vals.sum()

        T=data['pars'][:,4]
        T_var=data['pcov'][:,4,4]
        T_var += COV_SOFTEN
        T_err=sqrt(T_var)

        # these are for getting the overall mean T not the mean
        # s2n; that is below
        d['T_sum'][0] += T.sum()
        d['T_err2invsum'][0] += (1.0/T_var[w]).sum()

        T_s2n_vals = T/T_err
        d['T_s2n_sum'][0] += T_s2n_vals.sum()

def do_avg(conf, d, do_pqr=False, do_lensfit=False, do_simple=False):

    shear_cov = numpy.linalg.inv(d['shear_cov_inv_sum'][0])
    d['shear_cov'][0,:,:] = shear_cov

    if do_pqr:
        Cinv_sum = numpy.linalg.inv(d['Cinv_sum'][0])
        Q_sum = d['Q_sum'][0]
        shear = numpy.dot(Cinv_sum,Q_sum)

        # did we expand around the true shear?
        expand_shear=conf.get('expand_shear_true',False)
        if expand_shear:
            true_shear = numpy.array( conf['simc']['shear'] )
            print 'adding expand shear:',true_shear
            shear += true_shear

        d['shear'][0] = shear

        sherr=numpy.sqrt(shear_cov[0,0])
        fracdiff=shear[0]/conf['simc']['shear'][0]-1.0
        fracdiff_err=sherr/conf['simc']['shear'][0]
        print >>stderr,'fracdiff:          % .2e +/- %.2e' % (fracdiff, fracdiff_err)


    if do_lensfit:
        gmean = d['g_sum'][0]/d['nsum']
        gsens = d['gsens_sum'][0]/d['nsum']
        
        shl_cov = shear_cov.copy()
        shl_cov[0,0] /= (gsens[0]*gsens[0])
        shl_cov[0,1] /= (gsens[0]*gsens[1])
        shl_cov[1,0] /= (gsens[0]*gsens[1])
        shl_cov[1,1] /= (gsens[1]*gsens[1])
        shl_cov_inv = numpy.linalg.inv(shl_cov)

        shl =gmean/gsens
        sherr=numpy.sqrt(shl_cov[0,0])

        d['gsens'] = gsens
        d['shear_lensfit'] = shl
        d['shear_lensfit_cov'][0,:,:] = shl_cov
        d['shear_lensfit_cov_inv_sum'][0,:,:] = shl_cov_inv

        fracdiff=shl[0]/conf['simc']['shear'][0]-1.0
        fracdiff_err=sherr/conf['simc']['shear'][0]
        print >>stderr,'fracdiff(lensfit): % .2e +/- %.2e' % (fracdiff, fracdiff_err)

    if do_simple:
        d['flux'] = d['flux_sum']/d['nsum']
        d['flux_err'] = sqrt(1.0/d['flux_err2invsum'])
        d['flux_s2n'] = d['flux_s2n_sum']/d['nsum']
        d['T'] = d['T_sum']/d['nsum']
        d['T_err'] = sqrt(1.0/d['T_err2invsum'])
        d['T_s2n'] = d['T_s2n_sum']/d['nsum']

def get_averaged_gerror(conf, fname, s2n_matched):

    print >>stderr,fname
    with fitsio.FITS(fname) as fobj:
        nrows=fobj[1].get_nrows()

        dt, do_pqr, do_lensfit, do_simple = get_dtype(fobj)

        d=numpy.zeros(1, dtype=dt)
        d['s2n_matched'] = s2n_matched


        nchunks = get_chunk_info(nrows)

        for i in xrange(nchunks):
            beg = i*CHUNKSIZE
            end = (i+1)*CHUNKSIZE
            print '    %s:%s of %s' % (beg,end,nrows)
            data = fobj[1][beg:end]

            do_sums(data, d,
                    do_pqr=do_pqr,
                    do_lensfit=do_lensfit,
                    do_simple=do_simple)

    do_avg(conf,
           d,
           do_pqr=do_pqr,
           do_lensfit=do_lensfit,
           do_simple=do_simple)

    return d

def get_image_file(plot_dir, fname):
    bname=os.path.basename(fname)
    bname += '-jackknife.png'

    return os.path.join(plot_dir, bname)

def main():
    options,args = parser.parse_args(sys.argv[1:])

    if len(args) < 1:
        parser.print_help()
        sys.exit(45)

    run=args[0]

    if options.skip is None:
        skip=[]
    else:
        skip = [int(v) for v in options.skip.split(',')]

    c = nsim.files.read_config(run)
    c['simc'] = nsim.files.read_config(c['sim'])

    s2n_vals    = c['s2n_vals']

    n_s2n = len(s2n_vals)

    dlist=[]
    #for is2n in reversed(xrange(n_s2n)):

    for is2n in xrange(n_s2n):
        if is2n in skip:
            continue

        s2n_matched = s2n_vals[is2n]
        fname=nsim.files.get_output_url(run, 0, is2n)

        d = get_averaged_gerror(c, fname, s2n_matched)

        dlist.append(d)

    output = eu.numpy_util.combine_arrlist(dlist)
    out_fname=nsim.files.get_averaged_url(run, 0)
    print >>stderr,'writing:',out_fname
    eu.io.write(out_fname, output, clobber=True)

main()
