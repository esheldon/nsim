#!/usr/bin/env python
"""
    %prog run is2n

"""
from __future__ import print_function
import os
import sys
import nsim
import fitsio
from optparse import OptionParser

#import esutil as eu

import nsim

parser=OptionParser(__doc__)

parser.add_option('--allow-missing',action='store_true',
                  help="allow missing splits")
parser.add_option('--allow-mismatch',action='store_true',
                  help="allow mismatch in counts")

def get_tmp_file(fname):
    tmpdir=os.environ['TMPDIR']
    bname=os.path.basename(fname)
    return os.path.join(tmpdir, bname) 

def combine_trials(run, is2n, allow_missing=False, allow_mismatch=False):
    fs=nsim.files.get_default_fs()
    c = nsim.files.read_config(run)
    c['simc'] = nsim.files.read_config(c['sim'])

    npair_min=c.get('npair_min',None)
    npair,nsplit = nsim.files.get_npair_nsplit(c, is2n, npair_min=npair_min)
    ntot=npair*2

    outfile=nsim.files.get_output_url(run, 0, is2n, fs=fs, ext='fits')
    tmpfile=get_tmp_file(outfile)
    print('writing to temp file:',tmpfile)

    with fitsio.FITS(tmpfile,mode="rw",clobber=True) as output:

        for isplit in xrange(nsplit):
            f=nsim.files.get_output_url(run, 0, is2n, itrial=isplit, fs=fs)
            if allow_missing and not os.path.exists(f):
                continue
            print(f)
            t=fitsio.read(f)
            #t=eu.io.read(f)


            if not allow_mismatch:
                if t.size != ntot:
                    raise ValueError("%s expected %d, got %d" % (f,npair,t.size))

            #if 'processed' not in t.dtype.names:
            #    t=eu.numpy_util.add_fields(t, [('processed','i2')])
            #    t['processed']=1

            if isplit == 0:
                output.write(t)
            else:
                output[-1].append(t)

    print('moving to:',outfile)
    exit_code=os.system('mv -fv %s %s' % (tmpfile, outfile))
    if exit_code != 0:
        raise RuntimeError("error moving to final location")

def main():
    options,args = parser.parse_args(sys.argv[1:])

    if len(args) < 2:
        parser.print_help()
        sys.exit(1)

    run=args[0]
    is2n=int(args[1])

    combine_trials(run, is2n,
                   allow_missing=options.allow_missing,
                   allow_mismatch=options.allow_mismatch)


main()
