#!/usr/bin/env python
"""
    %prog run field ngauss
"""
from __future__ import print_function
import numpy
import ngmix
import nsim

from argparse import ArgumentParser
parser=ArgumentParser(__doc__)

parser.add_argument('run',help='sim run')
parser.add_argument('field',help='var to fit, T or flux',choices=['log_T','log_F'])
parser.add_argument('ngauss',type=int,help='number of gaussians to fit')


class PriorFitter(object):
    def __init__(self, run, field, ngauss):
        self.run=run
        self.field=field
        self.ngauss=ngauss

    def go(self):
        self.read_data()
        self.fit_prior()
        self.make_plot()
        self.write_prior()

    def fit_prior(self):
        from ngmix.gmix import GMixND

        print("fitting",self.ngauss,"gaussians to",self.field)

        gm = GMixND()

        gm.fit(self.data, self.ngauss)

        self.prior = gm

    def write_prior(self):
        url = nsim.files.get_fitprior_url(self.run,
                                          0,
                                          extra=self.field)
        print("writing to:",url)
        self.prior.save_mixture(url)

    def make_plot(self):
        import biggles
        eps = nsim.files.get_fitprior_url(self.run,
                                          0,
                                          extra=self.field,
                                          ext='eps')
        
        r=self.prior.sample(1000000)

        pwide = ngmix.gmix.GMixND(weights=self.prior.weights.copy(),
                                  means=self.prior.means.copy(),
                                  covars=self.prior.covars.copy()*1.44)
        rwide=pwide.sample(1000000)

        h=biggles.make_histc(self.data, nbin=100, ylog=True, norm=1)
        hr=biggles.make_histc(r, nbin=100, ylog=True, color='blue', norm=1)
        hwide=biggles.make_histc(rwide, nbin=100, ylog=True, color='red', norm=1)

        h.label='data'
        hr.label='model'
        hwide.label='model*1.44'

        key=biggles.PlotKey(0.9,0.9,[h,hr,hwide], halign='right')

        plt=biggles.FramedPlot()
        plt.xlabel=self.field
        plt.add(h, hr, hwide, key)


        print("writing plot:",eps)
        plt.write_eps(eps)

        eps=eps.replace('.eps','-ylog.eps')
        print("writing plot:",eps)
        plt.ylog=True
        plt.write_eps(eps)


    def read_data(self):
        data=nsim.files.read_output(self.run,0, rows=numpy.arange(100000))

        #g = numpy.sqrt(data['g'][:,0]**2 + data['g'][:,1]**2)

        #w,=numpy.where(g < 0.99)
        #data=data[w]
        #print("    kept %d/%d with g < 0.99" % w.size)

        if self.field=='log_T':
            fdata = data['pars'][:,4]
        elif self.field=='log_F':
            fdata = data['pars'][:,5]
        else:
            raise ValueError("bad field: '%s'" % self.field)

        self.data = fdata

def main():
    args = parser.parse_args()

    run=args.run
    field=args.field
    ngauss=args.ngauss

    fitter=PriorFitter(args.run, args.field, args.ngauss)
    fitter.go()

main()
