#!/usr/bin/env python
"""
    %prog system run
"""
from __future__ import print_function
import sys
import os
from math import ceil
import numpy

import nsim

from argparse import ArgumentParser
parser=ArgumentParser(__doc__)

parser.add_argument('system',help='batch system')
parser.add_argument('run',help='sim run')

parser.add_argument('--missing',action='store_true',
                    help='write wq job files for the missing files')

MAXTIME_HOURS=3.0

_lsf_template="""#!/bin/bash
#BSUB -J %(job_name)s
#BSUB -n 1
#BSUB -oo ./%(job_name)s.oe
#BSUB -W 12:00
#BSUB -R "linux64 && rhel60 && scratch > 2"

echo "working on host: $(hostname)"
uptime

command=%(master_script)s
ngal=%(ngal_per)s
output="%(output)s"
logfile="%(logfile)s"
seed=%(seed)s

${command} ${ngal} ${output} ${logfile} ${seed}
"""



_lsf_master_template="""#!/bin/bash
function runsim {
    echo "host: $(hostname)"
    echo "will write to file: $output"

    command=%(command)s
    ${command} --seed ${seed} ${run} ${ngal} ${output}
    status=$?

    echo "time: $SECONDS"

    if [[ $status != "0" ]]; then
        echo "error running sim: $status"
    fi

    return $status
}

ngal=$1
output=$2
logfile=$3
seed=$4

run=%(run)s

tmpdir="/scratch/esheldon/${LSB_JOBID}"
mkdir -p ${tmpdir}
echo "cd $tmpdir"
cd $tmpdir

tmplog=$(basename $logfile)

runsim &> ${tmplog}
status=$?

echo "moving log file ${tmplog} -> ${logfile}" >> ${tmplog}

# errors go to the jobs stderr
mv -fv "${tmplog}" "${logfile}" 1>&2
status2=$?

if [[ $status2 != "0" ]]; then
    # this error message will go to main error file
    echo "error ${status2} moving log to: ${logfile}" 1>&2

    status=$status2
fi

cd $HOME

echo "removing temporary directory"
rm -rfv ${tmpdir}

exit $status
"""

_wq_template="""
command: |

    #source $HOME/.bashrc
    . $HOME/shell_scripts/nsim2-prepare.sh

    command=%(master_script)s
    ngal=%(ngal_per)s
    output="%(output)s"
    logfile="%(logfile)s"
    seed=%(seed)d
    ${command} ${ngal} ${output} ${logfile} ${seed}
    
job_name: "%(job_name)s"
"""


_wq_master_template="""#!/bin/bash
function runsim {
    echo "host: $(hostname)"
    echo "will write to file: $output"

    command=%(command)s
    ${command} --seed ${seed} ${run} ${ngal} ${output}
    status=$?

    echo "time: $SECONDS"

    if [[ $status != "0" ]]; then
        echo "error running sim: $status"
    fi

    return $status
}


ngal=$1
output=$2
logfile=$3
seed=$4

run=%(run)s

tmpdir=$TMPDIR
mkdir -p $tmpdir
cd $tmpdir

tmplog=$(basename $logfile)

runsim &> ${tmplog}
status=$?

echo "moving log file ${tmplog} -> ${logfile}" >> ${tmplog}

# errors go to the jobs stderr
mv -fv "${tmplog}" "${logfile}" 1>&2
status2=$?

if [[ $status2 != "0" ]]; then
    # this error message will go to main error file
    echo "error ${status2} moving log to: ${logfile}" 1>&2

    status=$status2
fi

exit $status
"""


_slr_template="""#!/bin/bash
#SBATCH --array=0-%(last_id)s
#SBATCH -p shared
#SBATCH -J %(job_name)s
#SBATCH --nodes=1
#SBATCH --ntasks-per-node=1
#SBATCH --mem=400M
#SBATCH -o %(slr_log)s
#SBATCH -t %(walltime)s
#SBATCH --export=ALL
#SBATCH -A bnl100

echo "working on host: $(hostname)"

slr_pad_id=$(printf '%%06d' $SLURM_ARRAY_TASK_ID)

run=%(run)s
ngal=%(ngal_per)s
output=%(output)s
seed=%(seed)d

export TMPDIR=/scratch/$USER/$SLURM_JOB_ID
echo "cd $TMPDIR"
cd $TMPDIR

echo "will write to file: $output"

nsim-run           \\
        --seed $seed \\
        $run       \\
        $ngal      \\
        $output
status=$?

if [[ $status != "0" ]]; then
    echo "error running sim: $status"
fi

cd $HOME

exit $status
"""



def get_command():
    dir=os.environ['NSIM_DIR']
    cmd = os.path.join(dir, 'bin/nsim-run')
    return cmd

class MakerBase(dict):
    def __init__(self, conf):
        self.update(conf)

        numpy.random.seed(self['global_seed'])

    def go(self):
        self.make_some_dirs()
        self.write_master()

        self.write_batch_files()

    def write_master(self):
        master_url=self.get_master_url()

        with open(master_url,'w') as fobj:
            text = self.get_master_text()
            fobj.write(text % self)
        print()

        os.system('chmod 755 %s' % master_url)

        self['master_script'] = master_url


    def write_batch_files(self):
        overall_name = '-'.join( (self['run'].split('-'))[1:] )

        if self['missing']:
            overall_name += 'missing'

        njobs=0
        ngal_tot=0

        filenum=0

        ngal_per, nsplit, time_hours = nsim.files.get_gal_nsplit(self)
        self['ngal_per'] = ngal_per

        walltime = int(2.0 + time_hours)
        self['walltime'] = '%02d:00' % walltime

        for isplit in xrange(nsplit):

            seed = numpy.random.randint(0,2**31-1)

            ngal_tot += ngal_per
            output = nsim.files.get_output_url(self['run'], 0, 0, itrial=isplit)
            do_write=True
            if self['missing'] and os.path.exists(output):
                do_write=False

            if do_write:
                
                logfile = output.replace('.fits','.log')
                job_name='%s-%05d' % (overall_name,isplit)

                self['output'] = output
                self['logfile'] = logfile
                self['job_name']=job_name
                self['seed'] = seed
                self.write_script(filenum)

                njobs += 1
                filenum += 1


        print('total jobs: ',njobs)
        print('total gals:',ngal_tot)


    def write_script(self, filenum):
        job_url=self.get_job_url(filenum)
        
        with open(job_url,'w') as fobj:
            text = self.get_job_text()
            fobj.write(text)


    def make_some_dirs(self):

        d=self.get_batch_dir()
        outd = nsim.files.get_output_dir(self['run'], sub='bytrial')

        master_url=self.get_master_url()

        md=os.path.dirname(master_url)
        print("dir:",md)


        if not os.path.exists(d):
            os.makedirs(d)

        if not os.path.exists(outd):
            os.makedirs(outd)

        if not os.path.exists(md):
            os.makedirs(d)

        tmpdir=self.get_tmpdir()
        if tmpdir is not None:
            if not os.path.exists(tmpdir):
                os.makedirs(tmpdir)


class WQMaker(MakerBase):
    def get_tmpdir(self):
        tmpdir='/data/esheldon/tmp'
        return tmpdir

    def get_batch_dir(self):
        return nsim.files.get_wq_dir(self['run'])

    def get_master_url(self):
        master_url=nsim.files.get_wq_master_url(self['run'])
        return master_url

    def get_master_text(self):
        text = _wq_master_template % self
        return text

    def get_job_text(self):
        return _wq_template % self

    def get_job_url(self, filenum):
        job_url=nsim.files.get_wq_job_url(self['run'],
                                          filenum,
                                          missing=self['missing'])
        return job_url

class LSFMaker(MakerBase):
    def get_tmpdir(self):
        return None

    def get_batch_dir(self):
        return nsim.files.get_lsf_dir(self['run'])

    def get_master_url(self):
        master_url=nsim.files.get_lsf_master_url(self['run'])
        return master_url

    def get_master_text(self):
        text = _lsf_master_template % self
        return text

    def get_job_text(self):
        return _lsf_template % self

    def get_job_url(self, filenum):
        job_url=nsim.files.get_lsf_job_url(self['run'],
                                           filenum,
                                           missing=self['missing'])
        return job_url

class SLRMaker(MakerBase):
    def get_tmpdir(self):
        return None

    def get_batch_dir(self):
        return nsim.files.get_slr_dir(self['run'])

    def write_master(self):
        pass

    def write_batch_files(self):
        overall_name = '-'.join( (self['run'].split('-'))[1:] )

        njobs=0
        ngal_tot=0

        filenum=0

        ngal_per, nsplit, time_hours = nsim.files.get_gal_nsplit(self)
        self['ngal_per'] = ngal_per
        self['last_id'] = nsplit-1
        self['job_name'] = overall_name+'-%A-%a'
        self['slr_log'] = self['run']+'-%A-%a.out'

        walltime = int(2.0 + time_hours)
        self['walltime'] = '%02d:00:00' % walltime

        toutput = nsim.files.get_output_url(self['run'], 0, 0, itrial=0)
        output = toutput[0:-11]+'${slr_pad_id}.fits'

        self['output']=output

        self.write_script()

        print('total jobs: ',nsplit)
        print('total gals:',nsplit*ngal_per)

    def write_script(self):
        job_url=self.get_job_url()
        
        print("writing slurm script:",job_url)
        with open(job_url,'w') as fobj:
            text = self.get_job_text()
            fobj.write(text)


    def get_master_url(self):
        raise RuntimeError("no master for slr")

    def get_master_text(self):
        raise RuntimeError("no master for slr")

    def get_job_text(self):
        return _slr_template % self

    def get_job_url(self):
        job_url=nsim.files.get_slr_job_url(self['run'])
        return job_url

    def make_some_dirs(self):

        d=self.get_batch_dir()
        outd = nsim.files.get_output_dir(self['run'], sub='bytrial')

        print("dir:",d)

        if not os.path.exists(d):
            os.makedirs(d)

        if not os.path.exists(outd):
            os.makedirs(outd)

        tmpdir=self.get_tmpdir()
        if tmpdir is not None:
            if not os.path.exists(tmpdir):
                os.makedirs(tmpdir)


def main():
    args = parser.parse_args()

    system=args.system
    run=args.run

    c = nsim.files.read_config(run)
    c['simc'] = nsim.files.read_config(c['sim'])
    c['command'] = get_command()

    c['missing'] = args.missing

    if system=='wq':
        maker=WQMaker(c)
    elif system=='lsf':
        maker=LSFMaker(c)
    elif system=='slr':
        maker=SLRMaker(c)
    else:
        raise ValueError("bad queue system: '%s'" % system)
    maker.go()

main()
