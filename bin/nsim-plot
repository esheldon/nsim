#!/usr/bin/env python
"""
    %prog runs

run can be a csv
"""
from __future__ import print_function
import sys
import biggles
import fitsio
import nsim

import numpy
from numpy import sqrt

from optparse import OptionParser
parser=OptionParser(__doc__)

parser.add_option('--plot-type',default='shear',
                  help="type of plot, shear or weights")
parser.add_option('--index',default=0,
                  help='which shear component to plot')
parser.add_option('-y','--yrange',default=None, help='y range')
parser.add_option('-x','--xrange',default=None,
                  help='x range')
parser.add_option('--xticks',default=None,
                  help='the x tickes to label')


parser.add_option('--s2n-field',default='s2n_matched',
                  help="field for s2n")

parser.add_option('--eps',default=None,
                  help="eps file to write")
parser.add_option('--png',default=None,
                  help="png file to write")

#parser.add_option('--labels',default=None,
#                  help="labels for each run")

parser.add_option('--method',default='ba',
                  help="method to plot ('ba','gmean','lensfit','shearp')")

parser.add_option('--add-run-label',action='store_true',
                  help="lable run as well")
parser.add_option('--use-scatter',action='store_true',
                  help="use scatter about zero for error; only works if unbiased!")

parser.add_option('--panel',default=None,
                  help="labels for the panel")
parser.add_option('--noshow',action='store_true',
                  help="don't show on the screen")

def get_names(method):
    if method == 'ba':
        s_name='shear'
        scov_name='shear_cov'
    elif method=='gmean':
        s_name='g_sum'
        scov_name='shear_cov'
    elif method=='lensfit':
        s_name='shear_lensfit'
        scov_name='shear_lensfit_cov'
    elif method=='shearp':
        s_name='shearp'
        scov_name='shearp_err'
    else:
        raise ValueError("bad method: '%s'" % method)

    return s_name, scov_name

def get_method_name(method):
    if method=='ba':
        return 'B&A'
    else:
        return method

def plot_shear(plt, c, index, symbol, color, linestyle, options,
               with_points=True, with_curve=True,
               method='ba',
               add_run_label=False):

    if 'label' in c:
        label = c['label']
    else:
        label = c['simc']['label']

    if add_run_label:
        label='%s %s' % (c['run'].replace('run-',''), label )
    shear_true=c['simc']['shear'][index]

    url=nsim.files.get_averaged_url(c['run'])
    print(url)
    data=fitsio.read(url)

    s_name,scov_name=get_names(method)

    if scov_name=='shearp_err':
        shear=data[s_name]
        err=data[scov_name]
    else:

        if s_name=='g_sum':
            shear=data['g_sum'][:,index]/data['nsum']
        else:
            shear=data[s_name][:,index]
        err=sqrt(data[scov_name][:,index,index])

    s2n_vals = data[options.s2n_field]

    if options.xrange is None:
        xrng=[0.5*s2n_vals.min(), 2.0*s2n_vals.max()]
    else:
        xrng=options.xrange.split(',')
        xrng=[float(xr) for xr in xrng]


    if index==0:
        yvals = shear/shear_true-1
        yerr = err/shear_true
    else:
        yvals = shear-shear_true
        yerr = err

    if options.use_scatter:
        print('using scatter')
        w,=numpy.where( (s2n_vals >= xrng[0]) & (s2n_vals <= xrng[1]) )
        print(s2n_vals[w])
        yerr = yvals[w].std()
        yerr=numpy.array([yerr]*shear.size,dtype='f8')


    pts = biggles.Points(s2n_vals, 
                         yvals,
                         type=symbol,
                         size=2,
                         color=color)
    ep = biggles.SymmetricErrorBarsY(s2n_vals,
                                     yvals,
                                     yerr,
                                     width=2,
                                     color=color)
    crv = biggles.Curve(s2n_vals, 
                        yvals,
                        type=linestyle,
                        width=2,
                        color=color)

    crv.label=label
    pts.label=label
    if with_points:
        plt.add(pts,ep)

    if with_curve:
        plt.add(crv)

    return xrng, crv, pts

def plot_pqr_weights(plt, c, symbol, color, linestyle, options, max_weight,
                     with_points=True,
                     with_curve=True,
                     add_run_label=False):

    label = c['simc']['label']
    if add_run_label:
        label='%s %s' % (c['run'].replace('run-',''), label )

    url=nsim.files.get_averaged_url(c['run'])
    print(url)
    data=fitsio.read(url)

    s2n_vals = data[options.s2n_field]

    if options.xrange is None:
        xrng=[0.75*s2n_vals.min(), 1.25*s2n_vals.max()]
    else:
        xrng=options.xrange.split(',')
        xrng=[float(xr) for xr in xrng]


    yvals = data['Cinv_sum'][:, 0, 0]/data['nsum']/max_weight

    print('max val:',yvals.max())

    pts = biggles.Points(s2n_vals, 
                         yvals,
                         type=symbol,
                         size=2,
                         color=color)
    crv = biggles.Curve(s2n_vals, 
                        yvals,
                        type=linestyle,
                        width=2,
                        color=color)

    crv.label=label
    #pts.label=label
    if with_points:
        plt.add(pts)

    if with_curve:
        plt.add(crv)

    return xrng, crv, pts

def get_labels(runs, options):
    if options.labels is None:
        labels=runs
    else:
        labels=options.labels.split(',')
        labels=[r'$%s$' % l for l in labels]
        if len(labels) != len(runs):
            raise ValueError("Labels must have same length as runs")

    return labels

def get_max_weight(runs):
    max_weight=0.0
    for run in runs:
        d=nsim.files.read_averaged(run)
        if 'Cinv_sum' not in d.dtype.descr:
            return None
        wt = d['Cinv_sum'][:,0,0]/d['nsum']
        tmp=wt.max()
        if tmp > max_weight:
            max_weight=tmp

    return max_weight

def main():
    options,args = parser.parse_args(sys.argv[1:])

    if len(args) < 1:
        parser.print_help()
        sys.exit(45)

    runs=args
    method=options.method.lower()
    index=int( options.index )

    biggles.configure('default','fontsize_min',2.5)
    biggles.configure('_HalfAxis','ticks_size',2)
    biggles.configure('_HalfAxis','subticks_size',1)

    colors=['darkblue','red',     'darkgreen','magenta',
            'blue',    'firebrick','orange',   'purple']
    linestyles=['solid','dotdashed','shortdashed','dotted',
                'longdashed','dotdotdashed','dotdotdotdashed']
    symbols=['filled circle','filled triangle','filled square','filled diamond',
             'circle',       'triangle',       'square',       'diamond']
    #labels=get_labels(runs, options)

    if options.s2n_field=='s2n_matched':
        xlabel=r'$(S/N)_{matched}$'
    elif options.s2n_field=='flux_s2n':
        xlabel=r'$(S/N)_{flux}$'
    elif options.s2n_field=='T_s2n':
        xlabel=r'$(S/N)_{size}$'
    else:
        xlabel=options.s2n_field
    
    max_weight=get_max_weight(runs)

    plt=biggles.FramedPlot()

    if options.yrange is not None:
        yrng=options.yrange.split(',')
        yrng=[float(yr) for yr in yrng]
        plt.yrange=yrng

    if options.plot_type=='shear':
        if index==0:
            ylabel=r'$\Delta g/g$'
        else:
            ylabel=r'$\Delta g$'

        plt.add( biggles.FillBetween([1.e-6,5000], [0.004,0.004], 
                                      [1.e-6,5000], [-0.004,-0.004],
                                      color='grey90') )
        plt.add( biggles.FillBetween([1.e-6,5000], [0.001,0.001], 
                                      [1.e-6,5000], [-0.001,-0.001],
                                      color='grey80') )

        plt.add( biggles.Curve([1.e-6,5000],[0,0]) )
    elif options.plot_type=='weights':
        ylabel='weight per galaxy'
    else:
        raise ValueError("bad plot type: '%s'" % options.plot_type)

    plt.xlabel=xlabel
    plt.ylabel=ylabel
    plt.aspect_ratio=1
    plt.xlog=True
   

    cobj=[]
    for irun,run in enumerate(runs):

        c = nsim.files.read_config(run)
        c['simc'] = nsim.files.read_config(c['sim'])

        if options.plot_type=='shear':
            with_curve=False
            with_points=True
            xrng_run, crv_run, pts_run = plot_shear(plt, c, index,
                                                    symbols[irun],
                                                    colors[irun],
                                                    linestyles[irun],
                                                    options,
                                                    #labels[irun],
                                                    with_curve=with_curve,
                                                    with_points=with_points,
                                                    method=method,
                                                    add_run_label=options.add_run_label)
            cobj.append(pts_run)
        elif options.plot_type=='weights':
            with_curve=True
            with_points=False
            xrng_run, crv_run, pts_run = plot_pqr_weights(plt, c,
                                                          symbols[irun],
                                                          colors[irun],
                                                          linestyles[irun],
                                                          options,
                                                          max_weight,
                                                          with_curve=with_curve,
                                                          with_points=with_points,
                                                          add_run_label=options.add_run_label)
            cobj.append(crv_run)


        if irun==0:
            xrng=xrng_run
        else:
            xrng[0] = min(xrng[0],xrng_run[0])
            xrng[1] = max(xrng[1],xrng_run[1])
    
    if options.plot_type=='shear':
        ypos=0.9
    elif options.plot_type=='weights':
        ypos=0.5

    plt.xrange=xrng
    key=biggles.PlotKey(0.1,ypos,cobj,halign='left',fontsize=0.5)
    plt.add(key)

    if options.xticks is not None:
        xticks=options.xticks.split(',')
        xticks = [int(xt) for xt in xticks]
        plt.x1.ticks = xticks


    if options.panel is not None:
        l=biggles.PlotLabel(0.1,0.9,options.panel,
                            halign='left')
        plt.add(l)

    if not options.noshow:
        plt.show()

    if options.png:
        print(options.png)
        plt.write_img(800,800,options.png)
    if options.eps:
        print(options.eps)
        plt.write_eps(options.eps)
main()
