#!/usr/bin/env python
from __future__ import print_function
import sys
import os
import numpy
from numpy import log10, where, arange
import biggles

import ngmix
import nsim
from nsim import files

import galsim

import argparse

fclass=argparse.ArgumentDefaultsHelpFormatter
parser=argparse.ArgumentParser(formatter_class=fclass)

parser.add_argument('simname', help='sim to use')
parser.add_argument('epsfile', help='eps file to write')

nplot=4000000
nbin=100
#nplot=10000

def main():

    biggles.configure('default','fontsize_min',2.0)

    args = parser.parse_args()

    conf=files.read_config(args.simname)

    pspec = conf['psf']['fwhm']
    if pspec['type'] != 'lognormal':
        print('psf fwhm type must be lognormal')

    pp = ngmix.priors.LogNormal(pspec['mean'],pspec['sigma'])

    gspec = conf['obj_model']['r50']
    if gspec['type'] != 'lognormal':
        print('object r50 type must be lognormal')
    gp = ngmix.priors.LogNormal(gspec['mean'],gspec['sigma'])


    pfwhm_r = pp.sample(nplot)
    gr = gp.sample(nplot)

    pr = pfwhm_r*0
    print("converting fwhm to r50")
    for i in xrange(pr.size):
        m=galsim.Moffat(beta=conf['psf']['beta'],
                        fwhm=pfwhm_r[i])
        pr[i] = m.half_light_radius

    gcurve =biggles.make_histc(gr,
                               nbin=nbin,
                               min=0,
                               max=6,
                               smooth=True,
                               norm=1,
                               label='galaxies')


    pcurve =biggles.make_histc(pr,
                               nbin=nbin,
                               min=0,
                               max=6,
                               smooth=True,
                               color='red',
                               type='dashed',
                               norm=0.25,
                               label='PSF')

    key=biggles.PlotKey(0.9,0.9,[gcurve,pcurve],
                        halign='right')

    plt=biggles.FramedPlot()
    plt.xlabel=r'$r_{50} [pixels]$'
    plt.y1.draw_ticklabels=False
    plt.yrange=[0,0.75]
    plt.aspect_ratio=1.0/1.618

    plt.add(gcurve, pcurve, key)

    print("writing:",args.epsfile)
    plt.write_eps(args.epsfile)

main()
