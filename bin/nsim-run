#!/usr/bin/env python
"""
    %prog run s2n npairs output_file
"""

from __future__ import print_function

import sys
import os
from sys import stderr
import nsim
import fitsio

from optparse import OptionParser
parser=OptionParser(__doc__)
parser.add_option('--make-plots',action='store_true',
                  help="make some plots of the trials")

parser.add_option("--profile", action='store_true',
                  help=("Profile the code using cProfile"))

parser.add_option("--profile-image", default=None,
                  help=("Profile the code and create the specified "
                        "image using pycallgraph"))

def get_checkpoint_data(output_file):
    """
    Read in checkpoint data if it exists
    """
    checkpoint_file=output_file.replace('.fits','-checkpoint.fits')
    data=None

    if os.path.exists(checkpoint_file):
        print('reading checkpoint data:',checkpoint_file)
        data=fitsio.read(checkpoint_file)

    return checkpoint_file, data

def cleanup_checkpoint(checkpoint_file):
    """
    if we get this far, we have succeeded in writing the data. We can remove
    the checkpoint file
    """
    if os.path.exists(checkpoint_file):
        print('removing checkpoint file',checkpoint_file)
        os.remove(checkpoint_file)

def profile_sim(sim_conf,run_conf,s2n,npairs,output_file,options):
    # don't want to see the JIT
    import cProfile
    import pstats

    import ngmix

    cProfile.runctx('run_sim(sim_conf,run_conf,s2n,npairs,output_file,options)',
                    globals(),locals(),
                    'profile_stats')
    
    p = pstats.Stats('profile_stats')
    p.sort_stats('time').print_stats()


def profile_sim_pycallgraph(sim_conf,run_conf,s2n,npairs,output_file,options):
    # pycallgraph doesn't like it when the JIT starts up
    import ngmix

    import pycallgraph
    from pycallgraph import PyCallGraph
    from pycallgraph.output import GraphvizOutput

    img_name=options.profile_image
    graphviz = GraphvizOutput()
    print('profile image:',img_name)
    graphviz.output_file = img_name
    config=pycallgraph.Config(groups=False)

    with PyCallGraph(config=config, output=graphviz):
        run_sim(sim_conf,run_conf,s2n,npairs,output_file,options)


def run_sim(sim_conf,
            run_conf,
            s2n,
            npairs,
            output_file,
            options):


    simtype=sim_conf.get('simulator','ngmix')
    if simtype=='ngmix':
        sim=nsim.sim.NGMixSim(sim_conf, s2n)
    else:
        sim=nsim.simgs.SimGS(sim_conf)

    checkpoint_file, checkpoint_data=get_checkpoint_data(output_file)
    plot_base=output_file.replace('.fits','')

    kw=dict(checkpoint_file=checkpoint_file,
            checkpoint_data=checkpoint_data,
            make_plots=options.make_plots,
            plot_base=plot_base)

    ftype=run_conf['fitter']
    if ftype=='max':
        fitclass=nsim.fitters.MaxFitter

    elif ftype=='isample-gaussmom':
        fitclass=nsim.fitters.ISampleGaussMom

    elif ftype=='psample-gaussmom':
        fitclass=nsim.fitters.PSampleGaussMom


    elif ftype=='isample-gaussmom-metacal':
        fitclass=nsim.fitters.ISampleGaussMomMetacal


    elif ftype=='metacal-max':
        fitclass=nsim.fitters.MaxMetacalFitter

    elif ftype=='metacal-max-degrade':
        if simtype=='galsim':
            fitclass=nsim.fitters.MaxMetacalFitterDegradeGS
        else:
            fitclass=nsim.fitters.MaxMetacalFitterDegrade

    elif ftype=='metacal-mom':
        fitclass=nsim.fitters.MomMetacalFitter

    elif ftype=='metacal-admom':
        fitclass=nsim.fitters.AdmomMetacalFitter



    elif ftype=='metacal-isample':
        fitclass=nsim.fitters.ISampleMetacalFitter

    elif ftype=='metacal-isample-nearest':
        fitclass=nsim.fitters.ISampleMetacalFitterNearest

    elif ftype=='metacal-psamp':
        fitclass=nsim.fitters.PSampleMetacalFitter


    elif ftype=='metacal-em':
        fitclass=nsim.fitters.EMMetacalFitter

    else:
        raise RuntimeError("bad fitter: '%s'" % ftype)

    fitter=fitclass(sim, run_conf, npairs, **kw)
    fitter.go()

    data=fitter.get_data()

    success=nsim.util.write_fits(output_file, data)

    if success:
        cleanup_checkpoint(checkpoint_file)
    else:
        print('not removing checkpoint due to write failure')



def run_sim_old(sim_conf,run_conf,s2n,npairs,output_file,options):
    """
    Run the sim and deal with checkpointing

    s2n ignored for Joint
    """

    checkpoint_file, checkpoint_data=get_checkpoint_data(output_file)
    plot_base=output_file.replace('.fits','')

    args=(sim_conf, run_conf, s2n, npairs)
    kw=dict(checkpoint_file=checkpoint_file,
            checkpoint_data=checkpoint_data,
            make_plots=options.make_plots,
            plot_base=plot_base)
    if run_conf['fitter']=='pqrs-emcee':
        sim=nsim.sim.NGMixSimPQRSMCMC(*args, **kw)
    elif run_conf['fitter']=='covsample':
        sim=nsim.sim.NGMixSimCovSample(*args, **kw)
    elif run_conf['fitter']=='isample':
        if run_conf['fit_model']=='composite':
            sim=nsim.sim.NGMixSimISampleComposite(*args, **kw)
        else:
            sim=nsim.sim.NGMixSimISample(*args, **kw)
    elif run_conf['fitter']=='isample-p':
        sim=nsim.sim.NGMixSimISampleP(*args, **kw)
    else:
        sim=nsim.sim.NGMixSim(*args, **kw)

    sim.run_sim()

    data=sim.get_data()

    success=nsim.sim.write_fits(output_file, data)
    if success:
        cleanup_checkpoint(checkpoint_file)
    else:
        print('not removing checkpoint due to write failure')


def main():
    options,args = parser.parse_args(sys.argv[1:])

    if len(args) < 4:
        parser.print_help()
        sys.exit(45)

    run=args[0]
    s2n=float(args[1])
    npairs=int(args[2])
    output_file=args[3]

    print('reading config files')
    run_conf = nsim.files.read_config(run)
    sim_conf = nsim.files.read_config(run_conf['sim'])

    if options.profile_image is not None:
        print('profiling sim with pycallgraph')
        profile_sim_pycallgraph(sim_conf,run_conf,s2n,npairs,output_file,options)
    elif options.profile:
        print('profiling sim with cProfile')
        profile_sim(sim_conf,run_conf,s2n,npairs,output_file,options)
    else:
        print('running sim')
        run_sim(sim_conf,run_conf,s2n,npairs,output_file,options)

main()
